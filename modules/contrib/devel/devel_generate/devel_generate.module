<?php

use Drupal\comment\Plugin\Field\FieldType\CommentItemInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Language\Language;
use Drupal\devel_generate\DevelGenerateBase;
use Drupal\devel_generate\DevelGenerateFieldBase;

/**
 * Implements hook_menu_link_defaults_alter().
 */
function devel_generate_menu_link_defaults_alter(&$links) {

  $devel_generate_plugins = $devel_generate_manager = \Drupal::service('plugin.manager.develgenerate')->getDefinitions();
  foreach ($devel_generate_plugins as $id => $plugin) {
    $label = $plugin['label'];
    $links["devel_generate.$id"] = array(
      'title' => "Generate $label",
      'parent' => 'system.admin_config_development',
      'description' => $plugin['description'],
      'route_name' => "devel_generate.$id",
    );
  }
}

/**
 * Implements hook_permission().
 */
function devel_generate_permission() {
  $devel_generate_plugins = \Drupal::service('plugin.manager.develgenerate')->getDefinitions();
  foreach ($devel_generate_plugins as $plugin) {

    $permission = $plugin['permission'];
    $permissions[$permission] = array(
      'title' => t($permission),
    );
  }

  $permissions = array(
    'administer devel_generate' => array(
      'title' => t('Administer devel generate'),
    ),
  );
  return $permissions;
}

/**
 * Implements hook_node_insert().
 * Inserts nodes properly based on generation options.
 *
 * @param $node
 *  The base node created on submit. Inspects $node->devel_generate.
 */
function devel_generate_node_insert($node) {
  if (isset($node->devel_generate)) {
    $results = $node->devel_generate;

    if (!empty($results['max_comments'])) {
      $instances = entity_load_multiple_by_properties('field_instance_config', array('entity_type' => $node->getEntityTypeId(), 'bundle' => $node->bundle()));
      foreach ($instances as $instance) {
        $field_storage = $instance->getFieldStorageDefinition();
        if ($field_storage->getType() == 'comment') {
          devel_generate_add_comments($node, $field_storage, $results['users'], $results['max_comments'], $results['title_length']);
        }
      }
    }

    // Add an url alias. Cannot happen before save because we don't know the nid.
    if (!empty($results['add_alias'])) {
      $path = array(
        'source' => 'node/' . $node->id(),
        'alias' => 'node-' . $node->id() . '-' . $node->bundle(),
      );
      \Drupal::service('path.alias_storage')->save($path['source'], $path['alias']);
    }

    // Add node statistics.
    if (!empty($results['add_statistics']) && \Drupal::moduleHandler()->moduleExists('statistics')) {
      devel_generate_add_statistics($node);
    }
  }
}

/**
 * Create comments and add them to a node.
 *
 * @param EntityInterface $node
 *   Node to add comments to.
 * @param \Drupal\field\FieldStorageConfigInterface $field_storage
 *   The field storage definition.
 * @param array $users
 *   Array of users to assign comment authors.
 * @param int $max_comments
 *   Max number of comments to generate per node.
 * @param int $title_length
 *   Max length of the title of the comments.
 */
function devel_generate_add_comments(EntityInterface $node, $field_storage, $users, $max_comments, $title_length = 8) {
  $parents = array();
  $field_name = $field_storage->getName();
  if ($node->{$field_name}->status >= CommentItemInterface::OPEN) {
    $num_comments = mt_rand(1, $max_comments);
    for ($i = 1; $i <= $num_comments; $i++) {
      switch ($i % 3) {
        case 0:
          // No parent.
        case 1:
          // Top level parent.
          $parents = \Drupal::entityQuery('comment')->condition('pid', 0)->condition('entity_id', $node->id())->condition('entity_type', 'node')->range(0, 1)->execute();
          break;
        case 2:
          // Non top level parent.
          $parents = \Drupal::entityQuery('comment')->condition('pid', 0, '>')->condition('entity_id', $node->id())->condition('entity_type', 'node')->range(0, 1)->execute();
          break;
      }
      $stub = array(
        'entity_type' => $node->getEntityTypeId(),
        'entity_id' => $node->id(),
        'field_name' => $field_name,
        'name' => 'devel generate',
        'mail' => 'devel_generate@example.com',
        'timestamp' => mt_rand($node->created->value, REQUEST_TIME),
        'subject' => substr(DevelGenerateBase::createGreeking(mt_rand(2, $title_length), TRUE), 0, 63),
        'uid' => $users[array_rand($users)],
        'langcode' => Language::LANGCODE_NOT_SPECIFIED,
      );
      if ($parents) {
        $stub['pid'] = current($parents);
      }
      $comment = entity_create('comment', $stub);

      //Populate all core fields on behalf of field.module
      DevelGenerateFieldBase::generateFields($comment, 'comment', $comment->bundle());
      $comment->save();
    }
  }
}

/**
 * Generate statistics information for a node.
 *
 * @param EntityInterface $node
 *   A node object.
 */
function devel_generate_add_statistics($node) {
  $statistic = array(
    'nid' => $node->id(),
    'totalcount' => mt_rand(0, 500),
    'timestamp' => REQUEST_TIME - mt_rand(0, $node->created),
  );
  $statistic['daycount'] = mt_rand(0, $statistic['totalcount']);
  db_insert('node_counter')->fields($statistic)->execute();
}
